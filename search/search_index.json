{"config":{"lang":["en","ja"],"separator":"[\\s\\-,:!=\\[\\]()\"/]+|(?!\\b)(?=[A-Z][a-z])|\\.(?!\\d)|&[lg]t;","pipeline":["stemmer"]},"docs":[{"location":"","title":"WOS \u8bba\u6587\u81ea\u52a8\u5316\u5206\u6790\u5de5\u5177","text":""},{"location":"#1","title":"1 \u5f00\u53d1\u8bb0\u5f55","text":"<ul> <li>\u5f00\u53d1\u73af\u5883\u914d\u7f6e</li> </ul>"},{"location":"#2-conda","title":"2 \u4f7f\u7528 Conda \u5de5\u5177\u514b\u9686\u9879\u76ee\u865a\u62df\u73af\u5883","text":"<pre><code>conda env create -n essay_auto -f essay_auto_env.yaml\n</code></pre> <p>\u6fc0\u6d3b\u865a\u62df\u73af\u5883</p> <pre><code>conda activate essay_auto\n</code></pre> <p>\u542f\u52a8 JupyterLab</p> <pre><code>jupyterlab\n</code></pre>"},{"location":"Dev/00setup/","title":"WOS \u8bba\u6587\u81ea\u52a8\u5316\u5206\u6790\u5de5\u5177\u73af\u5883\u914d\u7f6e","text":""},{"location":"Dev/00setup/#1","title":"1 \u865a\u62df\u73af\u5883\u914d\u7f6e","text":""},{"location":"Dev/00setup/#11","title":"1.1 \u521b\u5efa\u865a\u62df\u73af\u5883","text":"<pre><code>conda create -n essay_auto python=3.9 -y\n</code></pre>"},{"location":"Dev/00setup/#12","title":"1.2 \u6fc0\u6d3b\u865a\u62df\u73af\u5883","text":"<pre><code>conda activate essay_auto\n</code></pre>"},{"location":"Dev/00setup/#2","title":"2 \u5b89\u88c5\u76f8\u5173\u5305","text":""},{"location":"Dev/00setup/#21","title":"2.1 \u5b89\u88c5\u57fa\u7840\u5f00\u53d1\u73af\u5883","text":"<pre><code>pip install jupyterlab pandas\n</code></pre>"},{"location":"Dev/00setup/#22-excel","title":"2.2 \u5b89\u88c5 excel \u4ea4\u4e92\u5305","text":"<pre><code>pip install xlrd openpyxl\n</code></pre>"},{"location":"Dev/00setup/#23","title":"2.3 \u5b89\u88c5\u53ef\u89c6\u5316\u5305","text":"<p>\u5b89\u88c5 <code>matplotlib</code> \u3001\u8bcd\u4e91\u5305\u4e0e <code>pyecharts</code> \u5305\uff0c\u7528\u4e8e\u6570\u636e\u7684\u53ef\u89c6\u5316\u5206\u6790</p> <pre><code>pip install matplotlib wordcloud pyecharts\n</code></pre>"},{"location":"Dev/00setup/#24","title":"2.4 \u5b89\u88c5\u7ffb\u8bd1\u5305","text":"<p>\u5b89\u88c5\u817e\u8baf\u4e91 python SDK \u7684 <code>tencentcloud-sdk-python</code> \u6a21\u5757</p> <pre><code>pip install tencentcloud-sdk-python\n</code></pre>"},{"location":"Dev/00setup/#3","title":"3 \u73af\u5883\u5907\u4efd","text":""},{"location":"Dev/00setup/#31","title":"3.1 \u5907\u4efd\u865a\u62df\u73af\u5883","text":"<pre><code>conda env export -n essay_auto &gt; essay_auto_env.yaml\n</code></pre> <ul> <li><code>-n</code> \u540e\u9762\u7684\u53c2\u6570\u662f\u5f85\u514b\u9686\u7684\u73af\u5883\u540d\u79f0</li> </ul>"},{"location":"Dev/00setup/#32","title":"3.2 \u514b\u9686\u865a\u62df\u73af\u5883","text":"<pre><code>conda env create -n essay_auto -f essay_auto_env.yaml\n</code></pre> <ul> <li><code>-n</code> \u540e\u7684\u53c2\u6570\u662f\u514b\u9686\u540e\u7684\u865a\u62df\u73af\u5883\u540d\u79f0</li> <li><code>-f</code> \u540e\u53c2\u6570\u6307\u7684\u662f <code>*.yaml</code> \u73af\u5883\u5185\u5bb9</li> </ul>"},{"location":"Dev/01wos_search/","title":"\u5f00\u53d1\u8bb0\u5f55\uff08\u4e00\uff09WOS \u8bba\u6587\u68c0\u7d22","text":""},{"location":"Dev/01wos_search/#web-of-science-wos","title":"Web of Science (WOS)","text":"<p>Web of Science \u662f\u4e00\u4e2a\u5927\u578b\u7efc\u5408\u6027\u3001\u591a\u5b66\u79d1\u3001\u6838\u5fc3\u671f\u520a\u5f15\u6587\u7d22\u5f15\u6570\u636e\u5e93\uff0c\u5305\u62ec\u79d1\u5b66\u5f15\u6587\u7d22\u5f15\u3001\u793e\u4f1a\u79d1\u5b66\u5f15\u6587\u7d22\u5f15\u3001\u827a\u672f\u4e0e\u4eba\u6587\u79d1\u5b66\u5f15\u6587\u7d22\u5f15\u7b49\uff0c\u53ef\u4ee5\u7528\u6765\u68c0\u7d22\u8bba\u6587\u3001\u5206\u6790\u9886\u57df\u53d1\u5c55\u8d8b\u52bf\u3001\u67e5\u8be2\u671f\u520a\u5f71\u54cd\u56e0\u5b50\u7b49\u3002</p> <p></p>"},{"location":"Dev/02data_preprocessing/","title":"\u5f00\u53d1\u8bb0\u5f55\uff08\u4e8c\uff09\u6570\u636e\u9884\u5904\u7406","text":""},{"location":"Dev/02data_preprocessing/#1","title":"1 \u6570\u636e\u6e05\u6d17","text":"<p>\u8bfb\u53d6\u4ece WOS \u68c0\u7d22\u7ed3\u679c\u5bfc\u51fa\u7684 excel \u8868\uff0c\u5220\u4e3a\u7a7a\u503c\u7684\u5217\uff0c\u5e76\u4e14\u5c06\u663e\u793a\u9519\u8bef\u7684\u5185\u5bb9\u6279\u91cf\u4fee\u6b63</p> <pre><code>def data_cleansing(inputFile, outputFile):\n    # \u8bfb\u53d6 xls \u6587\u4ef6\u4e2d\u7684\u6570\u636e\ndf = pd.read_excel(f'../data/input/{inputFile}')\n# \u5220\u9664\u6240\u6709\u5168\u4e3a\u7f3a\u5931\u503c\u7684\u5217\ndf = df.dropna(axis=1, how='all')\n# \u5220\u9664\u53ea\u6709\u5217\u540d\u6ca1\u6709\u6570\u636e\u7684\u5217\ndf = df.loc[:, (df.notnull().sum() &gt; 0)]\n# \u5c06 &amp;#8208; \u548c &amp;#8211; \u90fd\u66ff\u6362\u4e3a -\ndf = df.replace({'&amp;#8208; ': '-', '&amp;#8211; ': '-'}, regex=True)\n# \u5c06\u5904\u7406\u8fc7\u7684\u6570\u636e\u5bfc\u51fa\u5230\u65b0\u7684 Excel \u6587\u4ef6\u4e2d\ndf.to_excel(outputFile, index=False)\n</code></pre>"},{"location":"Dev/02data_preprocessing/#2","title":"2 \u6838\u5fc3\u6570\u636e\u7b5b\u9009","text":"<p>\u5c06\u8bba\u6587\u7684\u76f8\u5173\u6838\u5fc3\u6570\u636e\uff08\u539f\u6587\u6807\u9898\uff0c\u671f\u520a\uff0c\u4f5c\u8005\u5173\u952e\u8bcd\uff0cWOS \u5173\u952e\u8bcd\uff0c\u6458\u8981\uff0c\u5730\u5740\uff0c\u53d1\u8868\u5e74\u4efd\uff0cDOI \u7b49\uff09\u4ece\u4e2d\u7b5b\u9009\u51fa\u6765\uff0c\u5bfc\u51fa\u6210\u65b0\u7684\u6587\u4ef6</p> <pre><code>def coreDataSelect(inputFile, outputFile):\n    # \u8bfb\u53d6 xlsx \u6587\u4ef6\u4e2d\u7684\u6570\u636e\n    df = pd.read_excel(inputFile)\n    # \u7b5b\u9009\u51fa\u76ee\u6807\u8868\u5934\n    df = df.loc[:, [\"Article Title\", \"Source Title\", \"Author Keywords\",\n                    \"Keywords Plus\", 'Abstract', 'Addresses', \"Publication Year\", 'DOI']]\n    # \u5c06\u8868\u5934\u8fdb\u884c\u7ffb\u8bd1\n    df.columns=[\"\u539f\u6587\u6807\u9898\", \"\u671f\u520a\", \"\u4f5c\u8005\u5173\u952e\u8bcd\", \"WOS \u5173\u952e\u8bcd\", \"\u6458\u8981\", \"\u5730\u5740\", \"\u53d1\u8868\u5e74\u4efd\", \"DOI\"]\n    df.to_excel(outputFile, index=False)\n</code></pre>"},{"location":"Dev/03keywords_count/","title":"\u5f00\u53d1\u8bb0\u5f55\uff08\u4e09\uff09\u5173\u952e\u8bcd\u8bcd\u9891\u7edf\u8ba1","text":""},{"location":"Dev/03keywords_count/#1","title":"1 \u540c\u7c7b\u8bcd\u5408\u5e76","text":"<p>\u5728\u4f7f\u7528 pandas \u5bf9\u5b58\u50a8 wos \u8bba\u6587\u6570\u636e\u7684 <code>*.xlsx</code> \u6587\u4ef6\u4e2d\u5173\u952e\u8bcd\u8fdb\u884c\u8bcd\u9891\u7edf\u8ba1\u524d\uff0c\u5c06\u540c\u4e49\u8bcd\u4ee5\u53ca\u76f8\u540c\u542b\u4e49\u7684\u4e13\u4e1a\u672f\u8bed\u8fdb\u884c\u5408\u5e76\uff0c\u4ece\u800c\u63d0\u5347\u8bcd\u9891\u7edf\u8ba1\u7cbe\u786e\u5ea6\u3002</p>"},{"location":"Dev/03keywords_count/#11","title":"1.1 \u5173\u952e\u8bcd\u63d0\u53d6","text":"<p>\u7531\u4e8e WOS \u68c0\u7d22\u5f97\u5230\u8bba\u6587\u4fe1\u606f\u4e2d\u5305\u542b\u6587\u7ae0\u5173\u952e\u8bcd\u548c WOS \u5173\u952e\u8bcd\uff0c\u6240\u4ee5\u9700\u8981\uff1a</p> <ul> <li>\u9996\u5148\uff0c\u5c06\u4e24\u5217\u5173\u952e\u8bcd\u7684\u5185\u5bb9\u8fdb\u884c\u62fc\u63a5</li> <li>\u7136\u540e\uff0c\u5c06\u6bcf\u884c\u591a\u4e2a\u5173\u952e\u8bcd\uff0c\u7528\u5206\u53f7\u5206\u5272\u6210\u4e00\u4e2a\u5173\u952e\u8bcd\u5217\u8868</li> <li>\u6700\u540e\uff0c\u5e76\u5c06\u6240\u6709\u5173\u952e\u8bcd\u683c\u5f0f\u5316\uff08\u9996\u5b57\u6bcd\u5927\u5199\uff09</li> </ul> <pre><code># \u5c06\u6240\u6709\u5173\u952e\u8bcd\u5408\u5e76\u6210\u5217\u8868\u5e76\u5168\u90e8\u9996\u5b57\u6bcd\u5927\u5199\u5316\ndef all_keywords(inputFile):\n    df = pd.read_excel(inputFile)\n    # \u4ee5\u5206\u53f7\u5408\u5e76\u4e24\u5217\u5173\u952e\u8bcd\u5185\u5bb9\uff0c\u5e76\u4ee5\u5206\u53f7\u5207\u5272\u6210\u5217\u8868\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f \"; \" \u800c\u4e0d\u662f \";\"\n    keywords = df[\"\u4f5c\u8005\u5173\u952e\u8bcd\"].str.cat(sep=\"; \") + df[\"WOS \u5173\u952e\u8bcd\"].str.cat(sep=\"; \")\n    word_list = keywords.split(\"; \")\n    # \u4f7f\u7528\u5217\u8868\u63a8\u5bfc\u5f0f\u548c str.title () \u65b9\u6cd5\u5c06\u5217\u8868\u4e2d\u7684\u5b57\u7b26\u4e32\u5168\u90e8\u8f6c\u6362\u4e3a\u9996\u5b57\u6bcd\u5927\u5199\n    # str.upper () \u5168\u4f53\u5927\u5199\n    word_list_upper = [w.title() for w in word_list]\n    return word_list_upper\n</code></pre>"},{"location":"Dev/03keywords_count/#12","title":"1.2 \u540c\u7c7b\u8bcd\u5408\u5e76","text":""},{"location":"Dev/03keywords_count/#121","title":"1.2.1 \u5efa\u7acb\u4e13\u4e1a\u672f\u8bed\u6620\u5c04\u8868","text":"<p>\u5efa\u7acb\u4e00\u4e2a\u540c\u4e49\u8bcd\u548c\u4e13\u4e1a\u672f\u8bed\u7684\u6620\u5c04\u8868 (<code>related_terms.xlsx</code>)\uff0c\u628a\u4e0d\u540c\u7684\u8868\u8fbe\u65b9\u5f0f\u4f46\u662f\u610f\u601d\u76f8\u540c\u7684\u5355\u8bcd\u6216\u77ed\u8bed\u7edf\u4e00\u4e3a\u4e00\u4e2a\u6807\u51c6\u7684\u8bcd\u6c47\uff0c\u4ee5\u4fbf\u4e8e\u540e\u7eed\u7684\u8bcd\u9891\u7edf\u8ba1\u3002\u8868\u683c\u5185\u5bb9\u5982\u4e0b\uff1a</p> Original_Word Mapping_Word Gpp Gross Primary Production Gross Primary Productivity Gross Primary Production Gross Primary Production (Gpp) Gross Primary Production Gross Primary Productivity  (Gpp) Gross Primary Production Npp Net Primary Production Sif Solar-Induced Chlorophyll Fluorescence \u2026\u2026 \u2026\u2026"},{"location":"Dev/03keywords_count/#122","title":"1.2.2 \u5408\u5e76\u540c\u7c7b\u8bcd","text":"<p><code>pd.merge()</code> \u51fd\u6570\u628a\u5904\u7406\u597d\u7684\u5173\u952e\u8bcd\u5217\u8868\u548c\u6620\u5c04\u8868\u8fdb\u884c\u5408\u5e76\uff1a</p> <ul> <li> <p>\u6307\u5b9a\u5408\u5e76\u65b9\u5f0f\u4e3a\u5de6\u8fde\u63a5\uff08left join\uff09\uff0c\u4ee5\u4fdd\u7559\u6240\u6709\u539f\u59cb\u5173\u952e\u8bcd</p> </li> <li> <p>\u6307\u5b9a\u5408\u5e76\u4f9d\u636e\u4e3a\u539f\u59cb\u8bcd\uff08left_on\uff09\u548c\u6620\u5c04\u8bcd\uff08right_on\uff09</p> </li> </ul> <pre><code># \u5173\u952e\u8bcd\u540c\u4e49\u5408\u5e76\uff0c\u5e76\u8fd4\u56de\u5408\u5e76\u540e\u7684\u5355\u8bcd\u5217\u8868\ndef synonymMerge(inputFile):\n    word_list = all_keywords(inputFile)\n    # \u8bfb\u53d6\u6620\u5c04\u8868\n    df = pd.read_excel(\"../data/input/related_terms.xlsx\")\n    mapping_dict = dict(zip(df[\"Original_Word\"], df[\"Mapping_Word\"]))\n    # \u521b\u5efa\u4e00\u4e2a\u7a7a\u5217\u8868\u7528\u4e8e\u5b58\u50a8\u8f6c\u5316\u540e\u7684\u5143\u7d20\n    transformed_list = []\n    # \u904d\u5386word_list\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\n    for word in word_list:\n        # \u5982\u679c\u5143\u7d20\u5728\u5b57\u5178\u4e2d\u6709\u5bf9\u5e94\u7684\u952e\uff0c\u5219\u7528\u5b57\u5178\u4e2d\u7684\u503c\u66ff\u6362\u5b83\uff0c\u5426\u5219\u4fdd\u6301\u4e0d\u53d8\n        new_word = mapping_dict.get(word, word)\n        # \u5c06\u8f6c\u5316\u540e\u7684\u5143\u7d20\u6dfb\u52a0\u5230\u65b0\u5217\u8868\u4e2d\n        transformed_list.append(new_word)    \n    # \u8fd4\u56de\u5408\u5e76\u540e\u7684\u5217\u8868\u7c7b\u578b\u7684\u6570\u636e\n    return transformed_list\n</code></pre>"},{"location":"Dev/03keywords_count/#2","title":"2 \u8bcd\u9891\u7edf\u8ba1","text":"<p>\u4f7f\u7528 collections \u6a21\u5757\u7edf\u8ba1\u8bcd\u9891\uff0c\u5e76\u5c06\u8bcd\u9891\u7edf\u8ba1\u7ed3\u679c\u7684\u524d300\u4e2a\u8bcd\u5bfc\u51fa\u6210\u65b0\u7684excel\u6587\u6863\u3002</p> <pre><code>def wordCount(inputFile, outputFile):\n    # \u540c\u4e49\u8bcd\u66ff\u6362\n    word_list = synonymMerge(inputFile)\n    # \u4f7f\u7528collections\u8fdb\u884c\u8bcd\u9891\u7edf\u8ba1\uff0c\u83b7\u53d6\u524d300\u4e2a\u9ad8\u9891\u8bcd\u53ca\u5176\u51fa\u73b0\u6b21\u6570\n    # \u8fd4\u56de\u4e00\u4e2a\u5b57\u5178\uff0c\u952e\u4e3a\u5206\u8bcd\uff0c\u503c\u4e3a\u51fa\u73b0\u6b21\u6570\n    word_counts = collections.Counter(word_list)\n    # \u8fd4\u56de\u4e00\u4e2a\u5217\u8868\uff0c\u6bcf\u4e2a\u5143\u7d20\u662f\u4e00\u4e2a\u5143\u7ec4\uff0c\u5305\u542b\u5206\u8bcd\u548c\u51fa\u73b0\u6b21\u6570\n    word_counts_top300 = word_counts.most_common(300)\n    # \u5c06\u8bcd\u9891\u7edf\u8ba1\u7684\u7ed3\u679c\u5bfc\u51fa\u6210\u65b0\u7684excel\u6587\u6863\n    # \u521b\u5efa\u4e00\u4e2a\u6570\u636e\u6846\u5b58\u653e\u5217\u8868\u6570\u636e\n    df_word_counts = pd.DataFrame(word_counts_top300, columns=[\"Keyword\", \"Count\"])\n    # \u5bfc\u51fa\u6570\u636e\u5230excel\u6587\u4ef6\uff0c\u5e76\u53bb\u6389\u7d22\u5f15\u5217\n    df_word_counts.to_excel(outputFile, index=False)\n</code></pre>"},{"location":"Dev/04ML_translate/","title":"\u5f00\u53d1\u8bb0\u5f55\uff08\u56db\uff09\u673a\u5668\u7ffb\u8bd1","text":""},{"location":"Dev/04ML_translate/#1","title":"1 \u6a21\u5757\u4ecb\u7ecd","text":"<p>\u672c\u6a21\u5757\u501f\u52a9\u4e86\u817e\u8baf\u4e91\u673a\u5668\u7ffb\u8bd1 API \u7684\u6279\u91cf\u6587\u672c\u7ffb\u8bd1\u529f\u80fd\uff0c\u5b9e\u73b0\u5bf9\u5173\u952e\u8bcd\u5217\u8868\u7684\u6279\u91cf\u7ffb\u8bd1\uff0c\u5e76\u4e14\u5c06\u7ffb\u8bd1\u6a21\u5757\u5c01\u88c5\u6210\u5355\u4e2a\u6a21\u5757\uff0c\u4ee5\u4fbf\u4e3b\u6a21\u5757\u66f4\u7075\u6d3b\u5730\u8c03\u7528\u6279\u91cf\u7ffb\u8bd1\u529f\u80fd\u3002</p>"},{"location":"Dev/04ML_translate/#2-api","title":"2 API \u76f8\u5173\u914d\u7f6e","text":""},{"location":"Dev/04ML_translate/#21","title":"2.1 \u65b0\u5efa\u5bc6\u94a5","text":"<p>\u9996\u5148\u9700\u8981\u5728\u817e\u8baf\u4e91\u63a7\u5236\u53f0\u4e2d\u5efa\u7acb\u5bc6\u94a5\uff0c\u5bc6\u94a5\u5305\u62ec SecretId\uff0cSecretKey \u4e24\u4e2a\u6838\u5fc3\u5185\u5bb9</p> <p></p>"},{"location":"Dev/04ML_translate/#22","title":"2.2 \u65b0\u5efa\u9879\u76ee","text":"<p>\u5728\u521b\u5efa\u5bc6\u94a5\u540e\uff0c\u8fd8\u9700\u8981\u65b0\u5efa\u9879\u76ee\u4f7f\u7528\u9879\u76ee ID \u624d\u80fd\u6b63\u5f0f\u5b9e\u73b0\u817e\u8baf\u4e91\u673a\u5668\u7ffb\u8bd1 API \u7684\u8c03\u7528\u3002</p> <p></p>"},{"location":"Dev/04ML_translate/#23","title":"2.3 \u5bfc\u5165\u6a21\u5757","text":"<p>\u5bfc\u5165\u817e\u8baf\u4e91\u673a\u5668\u7ffb\u8bd1 API \u76f8\u5173\u6a21\u5757</p> <pre><code>from tencentcloud.common import credential\nfrom tencentcloud.common.profile.client_profile import ClientProfile\nfrom tencentcloud.common.profile.http_profile import HttpProfile\nfrom tencentcloud.common.exception.tencent_cloud_sdk_exception import TencentCloudSDKException\nfrom tencentcloud.tmt.v20180321 import tmt_client, models\n</code></pre>"},{"location":"Dev/04ML_translate/#24","title":"2.4 \u6dfb\u52a0\u5bc6\u94a5","text":"<p>\u5c06\u521b\u5efa\u597d\u7684\u817e\u8baf\u4e91 API \u5bc6\u94a5\u5bf9\u548c\u9879\u76ee ID \u6dfb\u52a0\u5230\u7a0b\u5e8f\u4e2d\uff0c\u624d\u80fd\u6b63\u5e38\u7684\u4f7f\u7528 API \u7684\u7ffb\u8bd1\u529f\u80fd\u3002</p> <pre><code>secretId = \"\u2026\u2026\"\nsecretKey = \"\u2026\u2026\"\nprojectId = \u2026\u2026\n</code></pre>"},{"location":"Dev/04ML_translate/#25","title":"2.5 \u8bbe\u7f6e\u6e90\u8bed\u8a00\u548c\u76ee\u6807\u8bed\u8a00","text":"<p>\u7a0b\u5e8f\u4e2d\u81ea\u52a8\u8bc6\u522b\u6e90\u8bed\u8a00\uff0c\u5c06\u6240\u6709\u5185\u5bb9\u90fd\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002</p> <pre><code>source = \"auto\"\ntarget = \"zh\"\n</code></pre>"},{"location":"Dev/04ML_translate/#3","title":"3 \u8bfb\u53d6\u6570\u636e","text":"<p>\u5c06\u8bfb\u53d6\u5230\u7684\u6570\u636e\u8868\u5217\u540d\u8f6c\u6362\u4e3a\u4ee5\u5217\u8868\u7684\u5f62\u5f0f\uff0c\u4ee5\u4fbf\u4e0e API \u8fdb\u884c\u7ffb\u8bd1\u4ea4\u4e92\u3002</p> <pre><code>def read_column(source_file, source_column):\n    df = pd.read_excel(source_file)\n    words = df[source_column]\n    words_list = words.tolist() # \u8f6c\u6362\u4e3a\u5217\u8868\n    return words_list\n</code></pre>"},{"location":"Dev/04ML_translate/#4","title":"4 \u7ffb\u8bd1\u4ea4\u4e92","text":""},{"location":"Dev/04ML_translate/#5","title":"5 \u5b58\u50a8\u7ffb\u8bd1\u7ed3\u679c","text":"<p>\u5728\u5b9e\u73b0\u4e0e API \u7684\u4ea4\u4e92\u5e76\u5f97\u5230\u8fd4\u56de\u7684\u7ffb\u8bd1\u6570\u636e\u540e\uff0c\u5c06\u5176\u4e0e\u6e90\u6570\u636e\u8fdb\u884c\u5408\u5e76\uff0c\u5e76\u5bfc\u51fa\u6210\u65b0\u7684 excel \u8868\u683c\u8fdb\u884c\u5b58\u50a8\u3002</p> <pre><code>def write_results(source_file, source_column, target_file, target_column):\n    source_df = pd.read_excel(source_file) # \u8bfb\u53d6\u539f\u6587\u4ef6\u4e3a\u4e00\u4e2aDataFrame\n    target_text_list = translate_words(source_file, source_column) # \u8c03\u7528\u7ffb\u8bd1\u51fd\u6570\uff0c\u8fd4\u56de\u4e00\u4e2alist\n    target_df = pd.DataFrame(target_text_list, columns=[target_column]) # \u5c06list\u8f6c\u6362\u4e3a\u4e00\u4e2aDataFrame\uff0c\u5e76\u6307\u5b9a\u5217\u540d\n    new_df = source_df.join(target_df) # \u5c06\u4e24\u4e2aDataFrame\u6309\u7167\u7d22\u5f15\u5408\u5e76\u4e3a\u4e00\u4e2a\u65b0\u7684DataFrame\n    new_df.to_excel(target_file, index=False)\n</code></pre>"},{"location":"Dev/05wordsclound/","title":"\u5f00\u53d1\u8bb0\u5f55\uff08\u4e94\uff09\u5173\u952e\u8bcd\u8bcd\u4e91\u53ef\u89c6\u5316","text":""},{"location":"Dev/05wordsclound/#1","title":"1 \u6a21\u5757\u4ecb\u7ecd","text":"<p>\u5728\u5bf9\u5173\u952e\u8bcd\u8fdb\u884c \u5408\u5e76\u3001\u9996\u5b57\u6bcd\u5927\u5199\u3001\u8bcd\u9891\u7edf\u8ba1\u3001\u7ffb\u8bd1\u7b49\u4e00\u7cfb\u5217\u5904\u7406\u540e\uff0c\u4f7f\u7528\u8bcd\u4e91\u5305\u4e0e <code>pyecharts</code> \u5305\u6765\u5b9e\u73b0\u5173\u952e\u8bcd\u8bcd\u4e91\u56fe\u7684\u663e\u793a\u3002</p>"},{"location":"Dev/05wordsclound/#2","title":"2 \u8bcd\u4e91\u56fe\u7ed8\u5236","text":""},{"location":"Dev/05wordsclound/#21","title":"2.1 \u521b\u5efa\u548c\u4fdd\u5b58\u8bcd\u4e91\u56fe\u50cf","text":"<pre><code>def create_wordcloud(word_freq, font_path, output_file):\n    wc = WordCloud(\n        # width = 300,\n        # height = 200,\n        background_color = 'white', \n        prefer_horizontal = 1, \n        min_font_size = 1,\n        font_path = f'./fonts/{font_path}', # \u4f7f\u7528 f-string \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\n        scale = 4,\n        max_words = 300\n        # stopwords = STOPWORDS, # \u76f4\u63a5\u4f20\u5165\u505c\u7528\u8bcd\u96c6\u5408\n        # colormap = 'viridis' # \u6307\u5b9a\u989c\u8272\u6620\u5c04\n    ).generate_from_frequencies(word_freq)\n    plt.figure(figsize=(6,6), dpi=300)\n    plt.imshow(wc, interpolation='bilinear')\n    plt.axis(\"off\")\n    plt.show()\n    wc.to_file(f'./output/{output_file}')\n</code></pre>"},{"location":"Dev/05wordsclound/#22","title":"2.2 \u7ed8\u5236\u5173\u952e\u8bcd\u8bcd\u4e91","text":"<p>\u8fd9\u91cc\u9ed8\u8ba4\u4e3a\u82f1\u6587\u8bcd\u4e91\uff0c\u4e2d\u6587\u8bcd\u4e91\u9700\u8981\u53e6\u884c\u8bbe\u7f6e\u3002</p> <pre><code>def keywordCloud(inputFile, lang='en'):\n    # \u8bfb\u53d6 xlsx \u6587\u4ef6\u4e2d\u7684\u6570\u636e\n    df = pd.read_excel(inputFile)\n    # \u5c06\u6570\u636e\u8f6c\u6362\u6210\u5b57\u5178\uff0c\u952e\u4e3a\u5173\u952e\u8bcd\uff0c\u503c\u4e3a\u9891\u6570\n    word_freq = dict(zip(\n        df['Keyword' if lang == 'en' else 'Keyword_Translation'],\n        df['Count']\n    ))\n    # \u8c03\u7528\u51fd\u6570\uff0c\u751f\u6210\u82f1\u6587/\u4e2d\u6587\u7684\u8bcd\u4e91\u56fe\u50cf\n    wc = create_wordcloud(\n        word_freq,\n        'times.ttf' if lang == 'en' else 'simsun.ttc',\n        f'wordcloud_{lang}.png'\n    )\n</code></pre>"}]}